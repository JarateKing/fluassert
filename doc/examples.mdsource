# Examples

## Basic

We can create simple fluasserts with a variety of methods.

```cpp
@@include ../examples/basic.cpp
```

The above code will pass fine without any problems (and by extension, produce no output), since all the fluasserts are true. An example of failing would look like:

```cpp
@@include ../examples/fail.cpp
```

Which would output to stderr:

```
@@run "../examples/run.sh" "../examples/fail.cpp"
@@output a.exe
```

## Advanced

### Disable

Much like with the traditional `assert.h` asserts, the `NDEBUG` define will disable all fluasserts:

```cpp
@@include ../examples/ndebug.cpp
```

Because the fluassert was disabled via `NDEBUG`, this program produces no output. This also removes the code from the compiled binary entirely, much like traditional asserts, so there should be no penalty to using fluasserts when using `NDEBUG`.

### Continue Running After Failure

By default, the program will exit early when an assert fails. This behaviour can be disabled with the `FLUASSERT_NOABORT` define, like so:

```cpp
@@include ../examples/fail_multiple.cpp
```

```
@@run "../examples/run.sh" "../examples/fail_multiple.cpp"
@@output a.exe
```

### Custom Output

By changing the define `FLUASSERT_HANDLER(x)` where `x` is the fluassert fail message as a string, we can intercept and/or modify how the fluassert fail message is printed.

```cpp
@@include ../examples/custom_handler.cpp
```

```
@@run "../examples/run.sh" "../examples/custom_handler.cpp"
@@output a.exe
```

### Compatibility with assert.h

By default, `assert()` calls are defined by including `fluassert.h`. This is incompatible with the default `assert.h` defines:

```cpp
@@include ../examples/without_assert.cpp
```

```
@@run "../examples/run.sh" "../examples/without_assert.cpp"
@@output a.exe
```

However, it is possible to use both simultaneously via usage of `FLUASSERT_PRESERVE_ASSERT`

```cpp
@@include ../examples/with_assert.cpp
```

```
@@run "../examples/run.sh" "../examples/with_assert.cpp"
@@output a.exe
```

@@run rm a.exe
